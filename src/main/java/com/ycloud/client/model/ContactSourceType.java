/*
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ycloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Contact source type enumeration values. These are internal type identifiers, not the display names shown on the contact page. Each enumeration value corresponds to the following display names: - WHATSAPP: \&quot;Inbound message\&quot; - GROWTH_TOOL: \&quot;Link/QR Code\&quot; - MANUALLY_ADDED: \&quot;Manually added\&quot; - FILE_IMPORT: \&quot;File import\&quot; - SHOPIFY: \&quot;Shopify\&quot; - API: \&quot;API added\&quot; - AD: \&quot;AD\&quot; - POST: \&quot;Post\&quot; - CALLING: \&quot;Calling\&quot; - SMB: \&quot;Whatsapp Business App\&quot; - UNKNOWN: \&quot;Unknown\&quot;
 */
@JsonAdapter(ContactSourceType.Adapter.class)
public enum ContactSourceType {
  
  WHATSAPP("WHATSAPP"),
  
  GROWTH_TOOL("GROWTH_TOOL"),
  
  MANUALLY_ADDED("MANUALLY_ADDED"),
  
  FILE_IMPORT("FILE_IMPORT"),
  
  SHOPIFY("SHOPIFY"),
  
  API("API"),
  
  AD("AD"),
  
  POST("POST"),
  
  CALLING("CALLING"),
  
  SMB("SMB"),
  
  UNKNOWN("UNKNOWN");

  private String value;

  ContactSourceType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ContactSourceType fromValue(String value) {
    for (ContactSourceType b : ContactSourceType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<ContactSourceType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ContactSourceType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ContactSourceType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ContactSourceType.fromValue(value);
    }
  }
}

