/*
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ycloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ycloud.client.JSON;

/**
 * Sent when a customer responds to a call permission request. Returned when &#x60;type&#x60; is &#x60;call_permission_reply&#x60;. This occurs when WhatsApp prompts users to grant callback permissions after they call your business.
 */
@ApiModel(description = "Sent when a customer responds to a call permission request. Returned when `type` is `call_permission_reply`. This occurs when WhatsApp prompts users to grant callback permissions after they call your business.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WhatsappInboundMessageInteractiveCallPermissionReply {
  /**
   * The customer&#39;s response to the call permission request. - &#x60;accept&#x60;: User granted permission for business to call back - &#x60;reject&#x60;: User rejected permission for business to call back
   */
  @JsonAdapter(ResponseEnum.Adapter.class)
  public enum ResponseEnum {
    ACCEPT("accept"),
    
    REJECT("reject");

    private String value;

    ResponseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseEnum fromValue(String value) {
      for (ResponseEnum b : ResponseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResponseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  /**
   * The customer&#39;s response to the call permission request. - &#x60;accept&#x60;: User granted permission for business to call back - &#x60;reject&#x60;: User rejected permission for business to call back
  **/
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private ResponseEnum response;

  public static final String SERIALIZED_NAME_EXPIRATION_TIMESTAMP = "expiration_timestamp";
  /**
   * The timestamp (in seconds) when the call permission expires. Only present when response is \&quot;accept\&quot; and is_permanent is false.
  **/
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIMESTAMP)
  private Long expirationTimestamp;

  public static final String SERIALIZED_NAME_IS_PERMANENT = "is_permanent";
  /**
   * Whether the permission is permanent or temporary. - &#x60;true&#x60;: Permanent authorization (no expiration) - &#x60;false&#x60;: Temporary authorization (expires at expiration_timestamp)
  **/
  @SerializedName(SERIALIZED_NAME_IS_PERMANENT)
  private Boolean isPermanent;

  /**
   * The source of this permission response. - &#x60;user_action&#x60;: User explicitly approved or rejected the permission - &#x60;automatic&#x60;: Automatic permission approval due to the WhatsApp user initiating the call
   */
  @JsonAdapter(ResponseSourceEnum.Adapter.class)
  public enum ResponseSourceEnum {
    USER_ACTION("user_action"),
    
    AUTOMATIC("automatic");

    private String value;

    ResponseSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseSourceEnum fromValue(String value) {
      for (ResponseSourceEnum b : ResponseSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResponseSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_SOURCE = "response_source";
  /**
   * The source of this permission response. - &#x60;user_action&#x60;: User explicitly approved or rejected the permission - &#x60;automatic&#x60;: Automatic permission approval due to the WhatsApp user initiating the call
  **/
  @SerializedName(SERIALIZED_NAME_RESPONSE_SOURCE)
  private ResponseSourceEnum responseSource;

  public WhatsappInboundMessageInteractiveCallPermissionReply() { 
  }

  public WhatsappInboundMessageInteractiveCallPermissionReply response(ResponseEnum response) {
    
    this.response = response;
    return this;
  }

   /**
   * The customer&#39;s response to the call permission request. - &#x60;accept&#x60;: User granted permission for business to call back - &#x60;reject&#x60;: User rejected permission for business to call back
   * @return response
  **/
  @javax.annotation.Nullable

  public ResponseEnum getResponse() {
    return response;
  }


  /**
   * The customer&#39;s response to the call permission request. - &#x60;accept&#x60;: User granted permission for business to call back - &#x60;reject&#x60;: User rejected permission for business to call back
   **/
  @ApiModelProperty(example = "accept", value = "The customer's response to the call permission request. - `accept`: User granted permission for business to call back - `reject`: User rejected permission for business to call back")
  public void setResponse(ResponseEnum response) {
    this.response = response;
  }


  public WhatsappInboundMessageInteractiveCallPermissionReply expirationTimestamp(Long expirationTimestamp) {
    
    this.expirationTimestamp = expirationTimestamp;
    return this;
  }

   /**
   * The timestamp (in seconds) when the call permission expires. Only present when response is \&quot;accept\&quot; and is_permanent is false.
   * @return expirationTimestamp
  **/
  @javax.annotation.Nullable

  public Long getExpirationTimestamp() {
    return expirationTimestamp;
  }


  /**
   * The timestamp (in seconds) when the call permission expires. Only present when response is \&quot;accept\&quot; and is_permanent is false.
   **/
  @ApiModelProperty(example = "1672531200", value = "The timestamp (in seconds) when the call permission expires. Only present when response is \"accept\" and is_permanent is false.")
  public void setExpirationTimestamp(Long expirationTimestamp) {
    this.expirationTimestamp = expirationTimestamp;
  }


  public WhatsappInboundMessageInteractiveCallPermissionReply isPermanent(Boolean isPermanent) {
    
    this.isPermanent = isPermanent;
    return this;
  }

   /**
   * Whether the permission is permanent or temporary. - &#x60;true&#x60;: Permanent authorization (no expiration) - &#x60;false&#x60;: Temporary authorization (expires at expiration_timestamp)
   * @return isPermanent
  **/
  @javax.annotation.Nullable

  public Boolean getIsPermanent() {
    return isPermanent;
  }


  /**
   * Whether the permission is permanent or temporary. - &#x60;true&#x60;: Permanent authorization (no expiration) - &#x60;false&#x60;: Temporary authorization (expires at expiration_timestamp)
   **/
  @ApiModelProperty(example = "false", value = "Whether the permission is permanent or temporary. - `true`: Permanent authorization (no expiration) - `false`: Temporary authorization (expires at expiration_timestamp)")
  public void setIsPermanent(Boolean isPermanent) {
    this.isPermanent = isPermanent;
  }


  public WhatsappInboundMessageInteractiveCallPermissionReply responseSource(ResponseSourceEnum responseSource) {
    
    this.responseSource = responseSource;
    return this;
  }

   /**
   * The source of this permission response. - &#x60;user_action&#x60;: User explicitly approved or rejected the permission - &#x60;automatic&#x60;: Automatic permission approval due to the WhatsApp user initiating the call
   * @return responseSource
  **/
  @javax.annotation.Nullable

  public ResponseSourceEnum getResponseSource() {
    return responseSource;
  }


  /**
   * The source of this permission response. - &#x60;user_action&#x60;: User explicitly approved or rejected the permission - &#x60;automatic&#x60;: Automatic permission approval due to the WhatsApp user initiating the call
   **/
  @ApiModelProperty(example = "user_action", value = "The source of this permission response. - `user_action`: User explicitly approved or rejected the permission - `automatic`: Automatic permission approval due to the WhatsApp user initiating the call")
  public void setResponseSource(ResponseSourceEnum responseSource) {
    this.responseSource = responseSource;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public WhatsappInboundMessageInteractiveCallPermissionReply putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WhatsappInboundMessageInteractiveCallPermissionReply whatsappInboundMessageInteractiveCallPermissionReply = (WhatsappInboundMessageInteractiveCallPermissionReply) o;
    return Objects.equals(this.response, whatsappInboundMessageInteractiveCallPermissionReply.response) &&
        Objects.equals(this.expirationTimestamp, whatsappInboundMessageInteractiveCallPermissionReply.expirationTimestamp) &&
        Objects.equals(this.isPermanent, whatsappInboundMessageInteractiveCallPermissionReply.isPermanent) &&
        Objects.equals(this.responseSource, whatsappInboundMessageInteractiveCallPermissionReply.responseSource)&&
        Objects.equals(this.additionalProperties, whatsappInboundMessageInteractiveCallPermissionReply.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(response, expirationTimestamp, isPermanent, responseSource, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WhatsappInboundMessageInteractiveCallPermissionReply {\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    expirationTimestamp: ").append(toIndentedString(expirationTimestamp)).append("\n");
    sb.append("    isPermanent: ").append(toIndentedString(isPermanent)).append("\n");
    sb.append("    responseSource: ").append(toIndentedString(responseSource)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("response");
    openapiFields.add("expiration_timestamp");
    openapiFields.add("is_permanent");
    openapiFields.add("response_source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WhatsappInboundMessageInteractiveCallPermissionReply
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WhatsappInboundMessageInteractiveCallPermissionReply.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WhatsappInboundMessageInteractiveCallPermissionReply is not found in the empty JSON string", WhatsappInboundMessageInteractiveCallPermissionReply.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response").toString()));
      }
      if (jsonObj.get("response_source") != null && !jsonObj.get("response_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WhatsappInboundMessageInteractiveCallPermissionReply.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WhatsappInboundMessageInteractiveCallPermissionReply' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WhatsappInboundMessageInteractiveCallPermissionReply> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WhatsappInboundMessageInteractiveCallPermissionReply.class));

       return (TypeAdapter<T>) new TypeAdapter<WhatsappInboundMessageInteractiveCallPermissionReply>() {
           @Override
           public void write(JsonWriter out, WhatsappInboundMessageInteractiveCallPermissionReply value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WhatsappInboundMessageInteractiveCallPermissionReply read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WhatsappInboundMessageInteractiveCallPermissionReply instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WhatsappInboundMessageInteractiveCallPermissionReply given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WhatsappInboundMessageInteractiveCallPermissionReply
  * @throws IOException if the JSON string is invalid with respect to WhatsappInboundMessageInteractiveCallPermissionReply
  */
  public static WhatsappInboundMessageInteractiveCallPermissionReply fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WhatsappInboundMessageInteractiveCallPermissionReply.class);
  }

 /**
  * Convert an instance of WhatsappInboundMessageInteractiveCallPermissionReply to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

