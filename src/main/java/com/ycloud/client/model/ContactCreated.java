/*
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ycloud.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ycloud.client.JSON;

/**
 * Represents a contact created event. Contains the full contact information that was created.
 */
@ApiModel(description = "Represents a contact created event. Contains the full contact information that was created.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContactCreated {
  public static final String SERIALIZED_NAME_ID = "id";
  /**
   * Unique ID for the object.
  **/
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NICK_NAME = "nickName";
  /**
   * Contact&#39;s nickname.
  **/
  @SerializedName(SERIALIZED_NAME_NICK_NAME)
  private String nickName;

  public static final String SERIALIZED_NAME_REAL_NAME = "realName";
  /**
   * Contact&#39;s real name.
  **/
  @SerializedName(SERIALIZED_NAME_REAL_NAME)
  private String realName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  /**
   * Unique Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
  **/
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  /**
   * Two-letter country abbreviation. See [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
  **/
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  /**
   * Full country name.
  **/
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  /**
   * The contact&#39;s email address. If present, the email address must be unique.
  **/
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  /**
   * The source type where the contact was created.
  **/
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  /**
   * The source ID where the contact was created.
  **/
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_URL = "sourceUrl";
  /**
   * The source URL where the contact was created.
  **/
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  /**
   * The time at which the contact last sent a message to your business, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
  **/
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private Date lastSeen;

  public static final String SERIALIZED_NAME_LAST_CONNECTED_NUMBER = "lastConnectedNumber";
  /**
   * The business phone number that the contact last connected to.
  **/
  @SerializedName(SERIALIZED_NAME_LAST_CONNECTED_NUMBER)
  private String lastConnectedNumber;

  public static final String SERIALIZED_NAME_OWNER_EMAIL = "ownerEmail";
  /**
   * The email address of the contact&#39;s owner.
  **/
  @SerializedName(SERIALIZED_NAME_OWNER_EMAIL)
  private String ownerEmail;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  /**
   * Contact&#39;s tags.
  **/
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  /**
   * The time at which the contact was created, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
  **/
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private Date createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  /**
   * The time at which the contact was last updated, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
  **/
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private Date updateTime;

  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  /**
   * Whether the contact is blocked.
  **/
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private Boolean blocked;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  /**
   * Contact&#39;s custom attributes as key-value pairs.
  **/
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private Map<String, Object> customAttributes = null;

  public ContactCreated() { 
  }

  public ContactCreated id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique ID for the object.
   * @return id
  **/
  @javax.annotation.Nonnull

  public String getId() {
    return id;
  }


  /**
   * Unique ID for the object.
   **/
  @ApiModelProperty(example = "1824266594102064128", required = true, value = "Unique ID for the object.")
  public void setId(String id) {
    this.id = id;
  }


  public ContactCreated nickName(String nickName) {
    
    this.nickName = nickName;
    return this;
  }

   /**
   * Contact&#39;s nickname.
   * @return nickName
  **/
  @javax.annotation.Nullable

  public String getNickName() {
    return nickName;
  }


  /**
   * Contact&#39;s nickname.
   **/
  @ApiModelProperty(example = "John Doe", value = "Contact's nickname.")
  public void setNickName(String nickName) {
    this.nickName = nickName;
  }


  public ContactCreated realName(String realName) {
    
    this.realName = realName;
    return this;
  }

   /**
   * Contact&#39;s real name.
   * @return realName
  **/
  @javax.annotation.Nullable

  public String getRealName() {
    return realName;
  }


  /**
   * Contact&#39;s real name.
   **/
  @ApiModelProperty(example = "John Smith", value = "Contact's real name.")
  public void setRealName(String realName) {
    this.realName = realName;
  }


  public ContactCreated phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Unique Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
   * @return phoneNumber
  **/
  @javax.annotation.Nullable

  public String getPhoneNumber() {
    return phoneNumber;
  }


  /**
   * Unique Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
   **/
  @ApiModelProperty(example = "+16315551111", value = "Unique Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.")
  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ContactCreated countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Two-letter country abbreviation. See [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   * @return countryCode
  **/
  @javax.annotation.Nullable

  public String getCountryCode() {
    return countryCode;
  }


  /**
   * Two-letter country abbreviation. See [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   **/
  @ApiModelProperty(example = "US", value = "Two-letter country abbreviation. See [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).")
  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public ContactCreated countryName(String countryName) {
    
    this.countryName = countryName;
    return this;
  }

   /**
   * Full country name.
   * @return countryName
  **/
  @javax.annotation.Nullable

  public String getCountryName() {
    return countryName;
  }


  /**
   * Full country name.
   **/
  @ApiModelProperty(example = "United States", value = "Full country name.")
  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public ContactCreated email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * The contact&#39;s email address. If present, the email address must be unique.
   * @return email
  **/
  @javax.annotation.Nullable

  public String getEmail() {
    return email;
  }


  /**
   * The contact&#39;s email address. If present, the email address must be unique.
   **/
  @ApiModelProperty(example = "john.doe@example.com", value = "The contact's email address. If present, the email address must be unique.")
  public void setEmail(String email) {
    this.email = email;
  }


  public ContactCreated sourceType(String sourceType) {
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * The source type where the contact was created.
   * @return sourceType
  **/
  @javax.annotation.Nullable

  public String getSourceType() {
    return sourceType;
  }


  /**
   * The source type where the contact was created.
   **/
  @ApiModelProperty(example = "api", value = "The source type where the contact was created.")
  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public ContactCreated sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * The source ID where the contact was created.
   * @return sourceId
  **/
  @javax.annotation.Nullable

  public String getSourceId() {
    return sourceId;
  }


  /**
   * The source ID where the contact was created.
   **/
  @ApiModelProperty(example = "import_batch_123", value = "The source ID where the contact was created.")
  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public ContactCreated sourceUrl(String sourceUrl) {
    
    this.sourceUrl = sourceUrl;
    return this;
  }

   /**
   * The source URL where the contact was created.
   * @return sourceUrl
  **/
  @javax.annotation.Nullable

  public String getSourceUrl() {
    return sourceUrl;
  }


  /**
   * The source URL where the contact was created.
   **/
  @ApiModelProperty(example = "https://example.com/signup", value = "The source URL where the contact was created.")
  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public ContactCreated lastSeen(Date lastSeen) {
    
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * The time at which the contact last sent a message to your business, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
   * @return lastSeen
  **/
  @javax.annotation.Nullable

  public Date getLastSeen() {
    return lastSeen;
  }


  /**
   * The time at which the contact last sent a message to your business, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
   **/
  @ApiModelProperty(example = "2025-07-09T02:24:16.193Z", value = "The time at which the contact last sent a message to your business, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.")
  public void setLastSeen(Date lastSeen) {
    this.lastSeen = lastSeen;
  }


  public ContactCreated lastConnectedNumber(String lastConnectedNumber) {
    
    this.lastConnectedNumber = lastConnectedNumber;
    return this;
  }

   /**
   * The business phone number that the contact last connected to.
   * @return lastConnectedNumber
  **/
  @javax.annotation.Nullable

  public String getLastConnectedNumber() {
    return lastConnectedNumber;
  }


  /**
   * The business phone number that the contact last connected to.
   **/
  @ApiModelProperty(example = "+16315551111", value = "The business phone number that the contact last connected to.")
  public void setLastConnectedNumber(String lastConnectedNumber) {
    this.lastConnectedNumber = lastConnectedNumber;
  }


  public ContactCreated ownerEmail(String ownerEmail) {
    
    this.ownerEmail = ownerEmail;
    return this;
  }

   /**
   * The email address of the contact&#39;s owner.
   * @return ownerEmail
  **/
  @javax.annotation.Nullable

  public String getOwnerEmail() {
    return ownerEmail;
  }


  /**
   * The email address of the contact&#39;s owner.
   **/
  @ApiModelProperty(example = "support@example.com", value = "The email address of the contact's owner.")
  public void setOwnerEmail(String ownerEmail) {
    this.ownerEmail = ownerEmail;
  }


  public ContactCreated tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public ContactCreated addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Contact&#39;s tags.
   * @return tags
  **/
  @javax.annotation.Nullable

  public List<String> getTags() {
    return tags;
  }


  /**
   * Contact&#39;s tags.
   **/
  @ApiModelProperty(example = "[\"customer\",\"vip\"]", value = "Contact's tags.")
  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public ContactCreated createTime(Date createTime) {
    
    this.createTime = createTime;
    return this;
  }

   /**
   * The time at which the contact was created, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
   * @return createTime
  **/
  @javax.annotation.Nullable

  public Date getCreateTime() {
    return createTime;
  }


  /**
   * The time at which the contact was created, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
   **/
  @ApiModelProperty(example = "2025-07-09T02:24:16.193Z", value = "The time at which the contact was created, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.")
  public void setCreateTime(Date createTime) {
    this.createTime = createTime;
  }


  public ContactCreated updateTime(Date updateTime) {
    
    this.updateTime = updateTime;
    return this;
  }

   /**
   * The time at which the contact was last updated, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
   * @return updateTime
  **/
  @javax.annotation.Nullable

  public Date getUpdateTime() {
    return updateTime;
  }


  /**
   * The time at which the contact was last updated, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., &#x60;2022-06-01T12:00:00.000Z&#x60;.
   **/
  @ApiModelProperty(example = "2025-07-09T02:24:16.193Z", value = "The time at which the contact was last updated, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.")
  public void setUpdateTime(Date updateTime) {
    this.updateTime = updateTime;
  }


  public ContactCreated blocked(Boolean blocked) {
    
    this.blocked = blocked;
    return this;
  }

   /**
   * Whether the contact is blocked.
   * @return blocked
  **/
  @javax.annotation.Nullable

  public Boolean getBlocked() {
    return blocked;
  }


  /**
   * Whether the contact is blocked.
   **/
  @ApiModelProperty(example = "false", value = "Whether the contact is blocked.")
  public void setBlocked(Boolean blocked) {
    this.blocked = blocked;
  }


  public ContactCreated customAttributes(Map<String, Object> customAttributes) {
    
    this.customAttributes = customAttributes;
    return this;
  }

  public ContactCreated putCustomAttributesItem(String key, Object customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new HashMap<>();
    }
    this.customAttributes.put(key, customAttributesItem);
    return this;
  }

   /**
   * Contact&#39;s custom attributes as key-value pairs.
   * @return customAttributes
  **/
  @javax.annotation.Nullable

  public Map<String, Object> getCustomAttributes() {
    return customAttributes;
  }


  /**
   * Contact&#39;s custom attributes as key-value pairs.
   **/
  @ApiModelProperty(example = "{\"company\":\"YCloud Inc\",\"age\":25,\"preferences\":{\"newsletter\":true}}", value = "Contact's custom attributes as key-value pairs.")
  public void setCustomAttributes(Map<String, Object> customAttributes) {
    this.customAttributes = customAttributes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public ContactCreated putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactCreated contactCreated = (ContactCreated) o;
    return Objects.equals(this.id, contactCreated.id) &&
        Objects.equals(this.nickName, contactCreated.nickName) &&
        Objects.equals(this.realName, contactCreated.realName) &&
        Objects.equals(this.phoneNumber, contactCreated.phoneNumber) &&
        Objects.equals(this.countryCode, contactCreated.countryCode) &&
        Objects.equals(this.countryName, contactCreated.countryName) &&
        Objects.equals(this.email, contactCreated.email) &&
        Objects.equals(this.sourceType, contactCreated.sourceType) &&
        Objects.equals(this.sourceId, contactCreated.sourceId) &&
        Objects.equals(this.sourceUrl, contactCreated.sourceUrl) &&
        Objects.equals(this.lastSeen, contactCreated.lastSeen) &&
        Objects.equals(this.lastConnectedNumber, contactCreated.lastConnectedNumber) &&
        Objects.equals(this.ownerEmail, contactCreated.ownerEmail) &&
        Objects.equals(this.tags, contactCreated.tags) &&
        Objects.equals(this.createTime, contactCreated.createTime) &&
        Objects.equals(this.updateTime, contactCreated.updateTime) &&
        Objects.equals(this.blocked, contactCreated.blocked) &&
        Objects.equals(this.customAttributes, contactCreated.customAttributes)&&
        Objects.equals(this.additionalProperties, contactCreated.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nickName, realName, phoneNumber, countryCode, countryName, email, sourceType, sourceId, sourceUrl, lastSeen, lastConnectedNumber, ownerEmail, tags, createTime, updateTime, blocked, customAttributes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactCreated {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    realName: ").append(toIndentedString(realName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    lastConnectedNumber: ").append(toIndentedString(lastConnectedNumber)).append("\n");
    sb.append("    ownerEmail: ").append(toIndentedString(ownerEmail)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nickName");
    openapiFields.add("realName");
    openapiFields.add("phoneNumber");
    openapiFields.add("countryCode");
    openapiFields.add("countryName");
    openapiFields.add("email");
    openapiFields.add("sourceType");
    openapiFields.add("sourceId");
    openapiFields.add("sourceUrl");
    openapiFields.add("lastSeen");
    openapiFields.add("lastConnectedNumber");
    openapiFields.add("ownerEmail");
    openapiFields.add("tags");
    openapiFields.add("createTime");
    openapiFields.add("updateTime");
    openapiFields.add("blocked");
    openapiFields.add("customAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContactCreated
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ContactCreated.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactCreated is not found in the empty JSON string", ContactCreated.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContactCreated.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("nickName") != null && !jsonObj.get("nickName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickName").toString()));
      }
      if (jsonObj.get("realName") != null && !jsonObj.get("realName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realName").toString()));
      }
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if (jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (jsonObj.get("countryName") != null && !jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceType").toString()));
      }
      if (jsonObj.get("sourceId") != null && !jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if (jsonObj.get("sourceUrl") != null && !jsonObj.get("sourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUrl").toString()));
      }
      if (jsonObj.get("lastConnectedNumber") != null && !jsonObj.get("lastConnectedNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastConnectedNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastConnectedNumber").toString()));
      }
      if (jsonObj.get("ownerEmail") != null && !jsonObj.get("ownerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerEmail").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactCreated.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactCreated' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactCreated> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactCreated.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactCreated>() {
           @Override
           public void write(JsonWriter out, ContactCreated value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactCreated read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContactCreated instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactCreated given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactCreated
  * @throws IOException if the JSON string is invalid with respect to ContactCreated
  */
  public static ContactCreated fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactCreated.class);
  }

 /**
  * Convert an instance of ContactCreated to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

