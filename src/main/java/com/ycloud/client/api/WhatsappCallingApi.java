/*
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ycloud.client.api;

import com.ycloud.client.ApiCallback;
import com.ycloud.client.ApiClient;
import com.ycloud.client.ApiException;
import com.ycloud.client.ApiResponse;
import com.ycloud.client.Configuration;
import com.ycloud.client.Pair;
import com.ycloud.client.ProgressRequestBody;
import com.ycloud.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ycloud.client.model.ErrorResponse;
import com.ycloud.client.model.WhatsappCallingConnectRequest;
import com.ycloud.client.model.WhatsappCallingPreAcceptRequest;
import com.ycloud.client.model.WhatsappCallingResponse;
import com.ycloud.client.model.WhatsappCallingTerminateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WhatsappCallingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WhatsappCallingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WhatsappCallingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accept
     * @param whatsappCallingPreAcceptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call accept request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptCall(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappCallingPreAcceptRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/calls/accept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptValidateBeforeCall(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'whatsappCallingPreAcceptRequest' is set
        if (whatsappCallingPreAcceptRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappCallingPreAcceptRequest' when calling accept(Async)");
        }
        

        okhttp3.Call localVarCall = acceptCall(whatsappCallingPreAcceptRequest, _callback);
        return localVarCall;

    }

    /**
     * Accept a call
     * <p>
     * Accepts an inbound WhatsApp call.  Once the WebRTC connection is made, this endpoint is used to accept the call. Media will begin flowing immediately since the connection was established prior to call connect.
     * @param whatsappCallingPreAcceptRequest  (required)
     * @return WhatsappCallingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call accept request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappCallingResponse accept(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest) throws ApiException {
        ApiResponse<WhatsappCallingResponse> localVarResp = acceptWithHttpInfo(whatsappCallingPreAcceptRequest);
        return localVarResp.getData();
    }

    /**
     * Accept a call
     * <p>
     * Accepts an inbound WhatsApp call.  Once the WebRTC connection is made, this endpoint is used to accept the call. Media will begin flowing immediately since the connection was established prior to call connect.
     * @param whatsappCallingPreAcceptRequest  (required)
     * @return ApiResponse&lt;WhatsappCallingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call accept request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappCallingResponse> acceptWithHttpInfo(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptValidateBeforeCall(whatsappCallingPreAcceptRequest, null);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept a call (asynchronously)
     * <p>
     * Accepts an inbound WhatsApp call.  Once the WebRTC connection is made, this endpoint is used to accept the call. Media will begin flowing immediately since the connection was established prior to call connect.
     * @param whatsappCallingPreAcceptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call accept request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptAsync(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest, final ApiCallback<WhatsappCallingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptValidateBeforeCall(whatsappCallingPreAcceptRequest, _callback);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connect
     * @param whatsappCallingConnectRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call connection request is successfully accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectCall(WhatsappCallingConnectRequest whatsappCallingConnectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappCallingConnectRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/calls/connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectValidateBeforeCall(WhatsappCallingConnectRequest whatsappCallingConnectRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'whatsappCallingConnectRequest' is set
        if (whatsappCallingConnectRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappCallingConnectRequest' when calling connect(Async)");
        }
        

        okhttp3.Call localVarCall = connectCall(whatsappCallingConnectRequest, _callback);
        return localVarCall;

    }

    /**
     * Connect a call
     * <p>
     * Initiates a WhatsApp call connection.  Establishes the initial connection for a WhatsApp call by providing SDP offer information. This endpoint is used for business-initiated calling scenarios.
     * @param whatsappCallingConnectRequest  (required)
     * @return WhatsappCallingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call connection request is successfully accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappCallingResponse connect(WhatsappCallingConnectRequest whatsappCallingConnectRequest) throws ApiException {
        ApiResponse<WhatsappCallingResponse> localVarResp = connectWithHttpInfo(whatsappCallingConnectRequest);
        return localVarResp.getData();
    }

    /**
     * Connect a call
     * <p>
     * Initiates a WhatsApp call connection.  Establishes the initial connection for a WhatsApp call by providing SDP offer information. This endpoint is used for business-initiated calling scenarios.
     * @param whatsappCallingConnectRequest  (required)
     * @return ApiResponse&lt;WhatsappCallingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call connection request is successfully accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappCallingResponse> connectWithHttpInfo(WhatsappCallingConnectRequest whatsappCallingConnectRequest) throws ApiException {
        okhttp3.Call localVarCall = connectValidateBeforeCall(whatsappCallingConnectRequest, null);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Connect a call (asynchronously)
     * <p>
     * Initiates a WhatsApp call connection.  Establishes the initial connection for a WhatsApp call by providing SDP offer information. This endpoint is used for business-initiated calling scenarios.
     * @param whatsappCallingConnectRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call connection request is successfully accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectAsync(WhatsappCallingConnectRequest whatsappCallingConnectRequest, final ApiCallback<WhatsappCallingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectValidateBeforeCall(whatsappCallingConnectRequest, _callback);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preAccept
     * @param whatsappCallingPreAcceptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call pre-accept request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preAcceptCall(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappCallingPreAcceptRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/calls/preAccept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preAcceptValidateBeforeCall(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'whatsappCallingPreAcceptRequest' is set
        if (whatsappCallingPreAcceptRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappCallingPreAcceptRequest' when calling preAccept(Async)");
        }
        

        okhttp3.Call localVarCall = preAcceptCall(whatsappCallingPreAcceptRequest, _callback);
        return localVarCall;

    }

    /**
     * Pre-accept a call
     * <p>
     * Pre-accepts an inbound WhatsApp call.  Pre-accepting calls allows the calling media connection to be established before attempting to send call media through the connection. This facilitates faster connection times and avoids audio clipping issues.
     * @param whatsappCallingPreAcceptRequest  (required)
     * @return WhatsappCallingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call pre-accept request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappCallingResponse preAccept(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest) throws ApiException {
        ApiResponse<WhatsappCallingResponse> localVarResp = preAcceptWithHttpInfo(whatsappCallingPreAcceptRequest);
        return localVarResp.getData();
    }

    /**
     * Pre-accept a call
     * <p>
     * Pre-accepts an inbound WhatsApp call.  Pre-accepting calls allows the calling media connection to be established before attempting to send call media through the connection. This facilitates faster connection times and avoids audio clipping issues.
     * @param whatsappCallingPreAcceptRequest  (required)
     * @return ApiResponse&lt;WhatsappCallingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call pre-accept request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappCallingResponse> preAcceptWithHttpInfo(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest) throws ApiException {
        okhttp3.Call localVarCall = preAcceptValidateBeforeCall(whatsappCallingPreAcceptRequest, null);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pre-accept a call (asynchronously)
     * <p>
     * Pre-accepts an inbound WhatsApp call.  Pre-accepting calls allows the calling media connection to be established before attempting to send call media through the connection. This facilitates faster connection times and avoids audio clipping issues.
     * @param whatsappCallingPreAcceptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call pre-accept request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preAcceptAsync(WhatsappCallingPreAcceptRequest whatsappCallingPreAcceptRequest, final ApiCallback<WhatsappCallingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = preAcceptValidateBeforeCall(whatsappCallingPreAcceptRequest, _callback);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reject
     * @param whatsappCallingTerminateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call rejection request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectCall(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappCallingTerminateRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/calls/reject";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectValidateBeforeCall(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'whatsappCallingTerminateRequest' is set
        if (whatsappCallingTerminateRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappCallingTerminateRequest' when calling reject(Async)");
        }
        

        okhttp3.Call localVarCall = rejectCall(whatsappCallingTerminateRequest, _callback);
        return localVarCall;

    }

    /**
     * Reject a call
     * <p>
     * Rejects an inbound WhatsApp call.  This endpoint is used to reject an incoming call from a WhatsApp user. The call will be terminated on the WhatsApp user side with appropriate notification.
     * @param whatsappCallingTerminateRequest  (required)
     * @return WhatsappCallingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call rejection request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappCallingResponse reject(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest) throws ApiException {
        ApiResponse<WhatsappCallingResponse> localVarResp = rejectWithHttpInfo(whatsappCallingTerminateRequest);
        return localVarResp.getData();
    }

    /**
     * Reject a call
     * <p>
     * Rejects an inbound WhatsApp call.  This endpoint is used to reject an incoming call from a WhatsApp user. The call will be terminated on the WhatsApp user side with appropriate notification.
     * @param whatsappCallingTerminateRequest  (required)
     * @return ApiResponse&lt;WhatsappCallingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call rejection request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappCallingResponse> rejectWithHttpInfo(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest) throws ApiException {
        okhttp3.Call localVarCall = rejectValidateBeforeCall(whatsappCallingTerminateRequest, null);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reject a call (asynchronously)
     * <p>
     * Rejects an inbound WhatsApp call.  This endpoint is used to reject an incoming call from a WhatsApp user. The call will be terminated on the WhatsApp user side with appropriate notification.
     * @param whatsappCallingTerminateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call rejection request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectAsync(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest, final ApiCallback<WhatsappCallingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectValidateBeforeCall(whatsappCallingTerminateRequest, _callback);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for terminate
     * @param whatsappCallingTerminateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call termination request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call terminateCall(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappCallingTerminateRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/calls/terminate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminateValidateBeforeCall(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'whatsappCallingTerminateRequest' is set
        if (whatsappCallingTerminateRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappCallingTerminateRequest' when calling terminate(Async)");
        }
        

        okhttp3.Call localVarCall = terminateCall(whatsappCallingTerminateRequest, _callback);
        return localVarCall;

    }

    /**
     * Terminate a call
     * <p>
     * Terminates an active WhatsApp call.  Both the business or the WhatsApp user can terminate the call at any time. This endpoint is used by the business to end the call.
     * @param whatsappCallingTerminateRequest  (required)
     * @return WhatsappCallingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call termination request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappCallingResponse terminate(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest) throws ApiException {
        ApiResponse<WhatsappCallingResponse> localVarResp = terminateWithHttpInfo(whatsappCallingTerminateRequest);
        return localVarResp.getData();
    }

    /**
     * Terminate a call
     * <p>
     * Terminates an active WhatsApp call.  Both the business or the WhatsApp user can terminate the call at any time. This endpoint is used by the business to end the call.
     * @param whatsappCallingTerminateRequest  (required)
     * @return ApiResponse&lt;WhatsappCallingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call termination request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappCallingResponse> terminateWithHttpInfo(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest) throws ApiException {
        okhttp3.Call localVarCall = terminateValidateBeforeCall(whatsappCallingTerminateRequest, null);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Terminate a call (asynchronously)
     * <p>
     * Terminates an active WhatsApp call.  Both the business or the WhatsApp user can terminate the call at any time. This endpoint is used by the business to end the call.
     * @param whatsappCallingTerminateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The call termination request is successfully processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call terminateAsync(WhatsappCallingTerminateRequest whatsappCallingTerminateRequest, final ApiCallback<WhatsappCallingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = terminateValidateBeforeCall(whatsappCallingTerminateRequest, _callback);
        Type localVarReturnType = new TypeToken<WhatsappCallingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
