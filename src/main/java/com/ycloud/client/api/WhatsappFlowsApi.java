/*
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ycloud.client.api;

import com.ycloud.client.ApiCallback;
import com.ycloud.client.ApiClient;
import com.ycloud.client.ApiException;
import com.ycloud.client.ApiResponse;
import com.ycloud.client.Configuration;
import com.ycloud.client.Pair;
import com.ycloud.client.ProgressRequestBody;
import com.ycloud.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.ycloud.client.model.WhatsappFlow;
import com.ycloud.client.model.WhatsappFlowCreate200Response;
import com.ycloud.client.model.WhatsappFlowCreate400Response;
import com.ycloud.client.model.WhatsappFlowCreateRequest;
import com.ycloud.client.model.WhatsappFlowList200Response;
import com.ycloud.client.model.WhatsappFlowPreviewUrl;
import com.ycloud.client.model.WhatsappFlowUpdateMetadata200Response;
import com.ycloud.client.model.WhatsappFlowUpdateMetadataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WhatsappFlowsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WhatsappFlowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WhatsappFlowsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for create
     * @param whatsappFlowCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a flow. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The Flow may be invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(WhatsappFlowCreateRequest whatsappFlowCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappFlowCreateRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(WhatsappFlowCreateRequest whatsappFlowCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'whatsappFlowCreateRequest' is set
        if (whatsappFlowCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappFlowCreateRequest' when calling create(Async)");
        }
        

        okhttp3.Call localVarCall = createCall(whatsappFlowCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a flow
     * <p>
     * Creates a new WhatsApp Flow. New Flows are by default created in DRAFT state. You can create a new published Flow in single request by specifying flowJson and publish parameters.
     * @param whatsappFlowCreateRequest  (required)
     * @return WhatsappFlowCreate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a flow. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The Flow may be invalid. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlowCreate200Response create(WhatsappFlowCreateRequest whatsappFlowCreateRequest) throws ApiException {
        ApiResponse<WhatsappFlowCreate200Response> localVarResp = createWithHttpInfo(whatsappFlowCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a flow
     * <p>
     * Creates a new WhatsApp Flow. New Flows are by default created in DRAFT state. You can create a new published Flow in single request by specifying flowJson and publish parameters.
     * @param whatsappFlowCreateRequest  (required)
     * @return ApiResponse&lt;WhatsappFlowCreate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a flow. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The Flow may be invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlowCreate200Response> createWithHttpInfo(WhatsappFlowCreateRequest whatsappFlowCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(whatsappFlowCreateRequest, null);
        Type localVarReturnType = new TypeToken<WhatsappFlowCreate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a flow (asynchronously)
     * <p>
     * Creates a new WhatsApp Flow. New Flows are by default created in DRAFT state. You can create a new published Flow in single request by specifying flowJson and publish parameters.
     * @param whatsappFlowCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a flow. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The Flow may be invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(WhatsappFlowCreateRequest whatsappFlowCreateRequest, final ApiCallback<WhatsappFlowCreate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(whatsappFlowCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlowCreate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param flowId Flow ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the flow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String flowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/flows/{flowId}"
            .replaceAll("\\{" + "flowId" + "\\}", localVarApiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String flowId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(flowId, _callback);
        return localVarCall;

    }

    /**
     * Delete a flow
     * <p>
     * Deletes a WhatsApp Flow. Only Flows in DRAFT status can be deleted.
     * @param flowId Flow ID. (required)
     * @return WhatsappFlowUpdateMetadata200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the flow. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlowUpdateMetadata200Response delete(String flowId) throws ApiException {
        ApiResponse<WhatsappFlowUpdateMetadata200Response> localVarResp = deleteWithHttpInfo(flowId);
        return localVarResp.getData();
    }

    /**
     * Delete a flow
     * <p>
     * Deletes a WhatsApp Flow. Only Flows in DRAFT status can be deleted.
     * @param flowId Flow ID. (required)
     * @return ApiResponse&lt;WhatsappFlowUpdateMetadata200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the flow. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlowUpdateMetadata200Response> deleteWithHttpInfo(String flowId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(flowId, null);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a flow (asynchronously)
     * <p>
     * Deletes a WhatsApp Flow. Only Flows in DRAFT status can be deleted.
     * @param flowId Flow ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the flow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String flowId, final ApiCallback<WhatsappFlowUpdateMetadata200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(flowId, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deprecate
     * @param flowId Flow ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deprecated the flow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecateCall(String flowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/flows/{flowId}/deprecate"
            .replaceAll("\\{" + "flowId" + "\\}", localVarApiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deprecateValidateBeforeCall(String flowId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling deprecate(Async)");
        }
        

        okhttp3.Call localVarCall = deprecateCall(flowId, _callback);
        return localVarCall;

    }

    /**
     * Deprecate a flow
     * <p>
     * Marks a published Flow as deprecated. Once a Flow is published, it cannot be modified or deleted, but can be marked as deprecated.
     * @param flowId Flow ID. (required)
     * @return WhatsappFlowUpdateMetadata200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deprecated the flow. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlowUpdateMetadata200Response deprecate(String flowId) throws ApiException {
        ApiResponse<WhatsappFlowUpdateMetadata200Response> localVarResp = deprecateWithHttpInfo(flowId);
        return localVarResp.getData();
    }

    /**
     * Deprecate a flow
     * <p>
     * Marks a published Flow as deprecated. Once a Flow is published, it cannot be modified or deleted, but can be marked as deprecated.
     * @param flowId Flow ID. (required)
     * @return ApiResponse&lt;WhatsappFlowUpdateMetadata200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deprecated the flow. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlowUpdateMetadata200Response> deprecateWithHttpInfo(String flowId) throws ApiException {
        okhttp3.Call localVarCall = deprecateValidateBeforeCall(flowId, null);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deprecate a flow (asynchronously)
     * <p>
     * Marks a published Flow as deprecated. Once a Flow is published, it cannot be modified or deleted, but can be marked as deprecated.
     * @param flowId Flow ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deprecated the flow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deprecateAsync(String flowId, final ApiCallback<WhatsappFlowUpdateMetadata200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deprecateValidateBeforeCall(flowId, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for list
     * @param wabaId WhatsApp Business Account ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of flows. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCall(String wabaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (wabaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wabaId", wabaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String wabaId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wabaId' is set
        if (wabaId == null) {
            throw new ApiException("Missing the required parameter 'wabaId' when calling list(Async)");
        }
        

        okhttp3.Call localVarCall = listCall(wabaId, _callback);
        return localVarCall;

    }

    /**
     * List flows
     * <p>
     * Returns a list of WhatsApp Flows under a WhatsApp Business Account (WABA).
     * @param wabaId WhatsApp Business Account ID. (required)
     * @return WhatsappFlowList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of flows. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlowList200Response list(String wabaId) throws ApiException {
        ApiResponse<WhatsappFlowList200Response> localVarResp = listWithHttpInfo(wabaId);
        return localVarResp.getData();
    }

    /**
     * List flows
     * <p>
     * Returns a list of WhatsApp Flows under a WhatsApp Business Account (WABA).
     * @param wabaId WhatsApp Business Account ID. (required)
     * @return ApiResponse&lt;WhatsappFlowList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of flows. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlowList200Response> listWithHttpInfo(String wabaId) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(wabaId, null);
        Type localVarReturnType = new TypeToken<WhatsappFlowList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List flows (asynchronously)
     * <p>
     * Returns a list of WhatsApp Flows under a WhatsApp Business Account (WABA).
     * @param wabaId WhatsApp Business Account ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of flows. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAsync(String wabaId, final ApiCallback<WhatsappFlowList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(wabaId, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlowList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preview
     * @param flowId Flow ID. (required)
     * @param invalidate the link will expire in 30 days in default, or if you set with invalidate&#x3D;true which will generate a new link. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate the flow preview url. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewCall(String flowId, Boolean invalidate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/flows/{flowId}/preview"
            .replaceAll("\\{" + "flowId" + "\\}", localVarApiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invalidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invalidate", invalidate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewValidateBeforeCall(String flowId, Boolean invalidate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling preview(Async)");
        }
        

        okhttp3.Call localVarCall = previewCall(flowId, invalidate, _callback);
        return localVarCall;

    }

    /**
     * generate a web preview URL with this flow.
     * <p>
     * In order to visualize the Flows created, you can generate a web preview URL with this request. **The preview URL is public and can be shared with different stakeholders to visualize the Flow.**.
     * @param flowId Flow ID. (required)
     * @param invalidate the link will expire in 30 days in default, or if you set with invalidate&#x3D;true which will generate a new link. (optional)
     * @return WhatsappFlowPreviewUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate the flow preview url. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlowPreviewUrl preview(String flowId, Boolean invalidate) throws ApiException {
        ApiResponse<WhatsappFlowPreviewUrl> localVarResp = previewWithHttpInfo(flowId, invalidate);
        return localVarResp.getData();
    }

    /**
     * generate a web preview URL with this flow.
     * <p>
     * In order to visualize the Flows created, you can generate a web preview URL with this request. **The preview URL is public and can be shared with different stakeholders to visualize the Flow.**.
     * @param flowId Flow ID. (required)
     * @param invalidate the link will expire in 30 days in default, or if you set with invalidate&#x3D;true which will generate a new link. (optional)
     * @return ApiResponse&lt;WhatsappFlowPreviewUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate the flow preview url. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlowPreviewUrl> previewWithHttpInfo(String flowId, Boolean invalidate) throws ApiException {
        okhttp3.Call localVarCall = previewValidateBeforeCall(flowId, invalidate, null);
        Type localVarReturnType = new TypeToken<WhatsappFlowPreviewUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * generate a web preview URL with this flow. (asynchronously)
     * <p>
     * In order to visualize the Flows created, you can generate a web preview URL with this request. **The preview URL is public and can be shared with different stakeholders to visualize the Flow.**.
     * @param flowId Flow ID. (required)
     * @param invalidate the link will expire in 30 days in default, or if you set with invalidate&#x3D;true which will generate a new link. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate the flow preview url. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewAsync(String flowId, Boolean invalidate, final ApiCallback<WhatsappFlowPreviewUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewValidateBeforeCall(flowId, invalidate, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlowPreviewUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publish
     * @param flowId Flow ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published the flow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishCall(String flowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/flows/{flowId}/publish"
            .replaceAll("\\{" + "flowId" + "\\}", localVarApiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishValidateBeforeCall(String flowId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling publish(Async)");
        }
        

        okhttp3.Call localVarCall = publishCall(flowId, _callback);
        return localVarCall;

    }

    /**
     * Publish a flow
     * <p>
     * Updates the status of the Flow to \&quot;PUBLISHED\&quot;. You can either edit this flow in the future and turn it back to the \&quot;DRAFT\&quot; state, or create a new flow by specifying the existing Flow ID as the cloneFlowId parameter.
     * @param flowId Flow ID. (required)
     * @return WhatsappFlowUpdateMetadata200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published the flow. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlowUpdateMetadata200Response publish(String flowId) throws ApiException {
        ApiResponse<WhatsappFlowUpdateMetadata200Response> localVarResp = publishWithHttpInfo(flowId);
        return localVarResp.getData();
    }

    /**
     * Publish a flow
     * <p>
     * Updates the status of the Flow to \&quot;PUBLISHED\&quot;. You can either edit this flow in the future and turn it back to the \&quot;DRAFT\&quot; state, or create a new flow by specifying the existing Flow ID as the cloneFlowId parameter.
     * @param flowId Flow ID. (required)
     * @return ApiResponse&lt;WhatsappFlowUpdateMetadata200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published the flow. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlowUpdateMetadata200Response> publishWithHttpInfo(String flowId) throws ApiException {
        okhttp3.Call localVarCall = publishValidateBeforeCall(flowId, null);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish a flow (asynchronously)
     * <p>
     * Updates the status of the Flow to \&quot;PUBLISHED\&quot;. You can either edit this flow in the future and turn it back to the \&quot;DRAFT\&quot; state, or create a new flow by specifying the existing Flow ID as the cloneFlowId parameter.
     * @param flowId Flow ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully published the flow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishAsync(String flowId, final ApiCallback<WhatsappFlowUpdateMetadata200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishValidateBeforeCall(flowId, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieve
     * @param flowId Flow ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the flow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCall(String flowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/flows/{flowId}"
            .replaceAll("\\{" + "flowId" + "\\}", localVarApiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveValidateBeforeCall(String flowId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling retrieve(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveCall(flowId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a flow
     * <p>
     * Retrieves a WhatsApp Flow&#39;s details.
     * @param flowId Flow ID. (required)
     * @return WhatsappFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the flow. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlow retrieve(String flowId) throws ApiException {
        ApiResponse<WhatsappFlow> localVarResp = retrieveWithHttpInfo(flowId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a flow
     * <p>
     * Retrieves a WhatsApp Flow&#39;s details.
     * @param flowId Flow ID. (required)
     * @return ApiResponse&lt;WhatsappFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the flow. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlow> retrieveWithHttpInfo(String flowId) throws ApiException {
        okhttp3.Call localVarCall = retrieveValidateBeforeCall(flowId, null);
        Type localVarReturnType = new TypeToken<WhatsappFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a flow (asynchronously)
     * <p>
     * Retrieves a WhatsApp Flow&#39;s details.
     * @param flowId Flow ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the flow. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAsync(String flowId, final ApiCallback<WhatsappFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveValidateBeforeCall(flowId, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMetadata
     * @param flowId Flow ID. (required)
     * @param whatsappFlowUpdateMetadataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the flow metadata. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetadataCall(String flowId, WhatsappFlowUpdateMetadataRequest whatsappFlowUpdateMetadataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappFlowUpdateMetadataRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/flows/{flowId}/metadata"
            .replaceAll("\\{" + "flowId" + "\\}", localVarApiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetadataValidateBeforeCall(String flowId, WhatsappFlowUpdateMetadataRequest whatsappFlowUpdateMetadataRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling updateMetadata(Async)");
        }
        
        // verify the required parameter 'whatsappFlowUpdateMetadataRequest' is set
        if (whatsappFlowUpdateMetadataRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappFlowUpdateMetadataRequest' when calling updateMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = updateMetadataCall(flowId, whatsappFlowUpdateMetadataRequest, _callback);
        return localVarCall;

    }

    /**
     * Update flow metadata
     * <p>
     * Updates a WhatsApp Flow&#39;s metadata (name or categories).
     * @param flowId Flow ID. (required)
     * @param whatsappFlowUpdateMetadataRequest  (required)
     * @return WhatsappFlowUpdateMetadata200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the flow metadata. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlowUpdateMetadata200Response updateMetadata(String flowId, WhatsappFlowUpdateMetadataRequest whatsappFlowUpdateMetadataRequest) throws ApiException {
        ApiResponse<WhatsappFlowUpdateMetadata200Response> localVarResp = updateMetadataWithHttpInfo(flowId, whatsappFlowUpdateMetadataRequest);
        return localVarResp.getData();
    }

    /**
     * Update flow metadata
     * <p>
     * Updates a WhatsApp Flow&#39;s metadata (name or categories).
     * @param flowId Flow ID. (required)
     * @param whatsappFlowUpdateMetadataRequest  (required)
     * @return ApiResponse&lt;WhatsappFlowUpdateMetadata200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the flow metadata. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlowUpdateMetadata200Response> updateMetadataWithHttpInfo(String flowId, WhatsappFlowUpdateMetadataRequest whatsappFlowUpdateMetadataRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMetadataValidateBeforeCall(flowId, whatsappFlowUpdateMetadataRequest, null);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update flow metadata (asynchronously)
     * <p>
     * Updates a WhatsApp Flow&#39;s metadata (name or categories).
     * @param flowId Flow ID. (required)
     * @param whatsappFlowUpdateMetadataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the flow metadata. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMetadataAsync(String flowId, WhatsappFlowUpdateMetadataRequest whatsappFlowUpdateMetadataRequest, final ApiCallback<WhatsappFlowUpdateMetadata200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetadataValidateBeforeCall(flowId, whatsappFlowUpdateMetadataRequest, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStructure
     * @param flowId Flow ID. (required)
     * @param flowJson JSON file containing the Flow structure. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the flow structure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The Flow structure may be invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStructureCall(String flowId, File flowJson, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/flows/{flowId}/assets"
            .replaceAll("\\{" + "flowId" + "\\}", localVarApiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flowJson != null) {
            localVarFormParams.put("flowJson", flowJson);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStructureValidateBeforeCall(String flowId, File flowJson, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling updateStructure(Async)");
        }
        
        // verify the required parameter 'flowJson' is set
        if (flowJson == null) {
            throw new ApiException("Missing the required parameter 'flowJson' when calling updateStructure(Async)");
        }
        

        okhttp3.Call localVarCall = updateStructureCall(flowId, flowJson, _callback);
        return localVarCall;

    }

    /**
     * Update flow structure
     * <p>
     * Updates a WhatsApp Flow&#39;s structure. Note that the file must be attached as form-data.
     * @param flowId Flow ID. (required)
     * @param flowJson JSON file containing the Flow structure. (required)
     * @return WhatsappFlowUpdateMetadata200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the flow structure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The Flow structure may be invalid. </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappFlowUpdateMetadata200Response updateStructure(String flowId, File flowJson) throws ApiException {
        ApiResponse<WhatsappFlowUpdateMetadata200Response> localVarResp = updateStructureWithHttpInfo(flowId, flowJson);
        return localVarResp.getData();
    }

    /**
     * Update flow structure
     * <p>
     * Updates a WhatsApp Flow&#39;s structure. Note that the file must be attached as form-data.
     * @param flowId Flow ID. (required)
     * @param flowJson JSON file containing the Flow structure. (required)
     * @return ApiResponse&lt;WhatsappFlowUpdateMetadata200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the flow structure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The Flow structure may be invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappFlowUpdateMetadata200Response> updateStructureWithHttpInfo(String flowId, File flowJson) throws ApiException {
        okhttp3.Call localVarCall = updateStructureValidateBeforeCall(flowId, flowJson, null);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update flow structure (asynchronously)
     * <p>
     * Updates a WhatsApp Flow&#39;s structure. Note that the file must be attached as form-data.
     * @param flowId Flow ID. (required)
     * @param flowJson JSON file containing the Flow structure. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the flow structure. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The Flow structure may be invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStructureAsync(String flowId, File flowJson, final ApiCallback<WhatsappFlowUpdateMetadata200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStructureValidateBeforeCall(flowId, flowJson, _callback);
        Type localVarReturnType = new TypeToken<WhatsappFlowUpdateMetadata200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
